#ifndef COPYDLL_H
#define COPYDLL_H
///////////////////////////////////////////////////////////////////////////
// CopyDlls.h - GUI of the Utility to copy dll files to Test Server      //
// ver 1.0  4/28/2012                                                    //
// Language:    Visual C++, Visual Studio 2010, SP1                      //
// Application: CSE 687 Project4                                         //
// Author:      Junwen Bu                                                //
///////////////////////////////////////////////////////////////////////////
/*
* Module Operations:
* =================================
* This module provide a utility to copy dll files from the Test Client to 
* Test Server before testing so that the Test Harness does not have to request
* files from the client.
*
* Required Files:
* ===============
* CopyDlls.h, CopyDlls.cpp, Base64.h, Base64.cpp
* Communicator.lib
* 
* Interface:
* ==========================
* Almost everything are generated by Visual Studio 2010
*
* One Thread-use Functions:
* ---------------------------------------------
* Void run(): used by thread to send Dll files to the Test Server
* System::Threading::Thread^ t=gcnew System::Threading::Thread(gcnew ThreadStart(this, &CopyDlls::run));
* t->Start();
*
* Buttons:
* ---------------------------------------------
* button1(Path): select the path of Dll files
* button2(Send): checking send dll list and send dll files to Test Server
* button3(End): terminate only TestClient not TestServer
* button4(Back): Back to Form1 main GUI of Test Client
*
*/

#pragma once
#using <mscorlib.dll>
#include "Comm.h"
#include <vcclr.h>
#include <string>
#include <iostream>
#include <sstream>
#include <fstream>
#include <fstream>
#include "Base64.h"
#include <msclr\marshal_cppstd.h>

namespace Client {
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Threading;
	using namespace System::IO;
	using namespace msclr::interop;

	/// <summary>
	/// Summary for CopyDlls
	/// </summary>
	public ref class CopyDlls : public System::Windows::Forms::Form
	{
	public:
		CopyDlls(BOOL tag)
		{
			//
			//TODO: Add the constructor code here
			// tag is used to decide show or hide 'End' OR 'Back' button
			this->showCancel=tag;
			InitializeComponent();
			if(!tag)
				this->button4->Hide();
			else {
				this->button4->Show();
				this->button3->Hide();
				this->label3->Hide();
			}
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~CopyDlls()
		{
			if (components)
			{
				delete components;
			}
			delete sndr;
		}

	private: SocketCommunicator::Sender *sndr;
	private: BOOL showCancel;
	private: BOOL connect;

	private: System::Windows::Forms::TextBox^  textBox1;
	private: System::Windows::Forms::Button^  button1;
	private: System::Windows::Forms::Label^  label1;
	private: System::Windows::Forms::ListBox^  listBox1;
	private: System::Windows::Forms::Button^  button2;
	private: System::Windows::Forms::FolderBrowserDialog^  folderBrowserDialog1;
	private: System::Windows::Forms::Button^  button3;
	private: System::Windows::Forms::Label^  label3;
	private: System::Windows::Forms::Button^  button4;
	protected: 

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->listBox1 = (gcnew System::Windows::Forms::ListBox());
			this->button2 = (gcnew System::Windows::Forms::Button());
			this->folderBrowserDialog1 = (gcnew System::Windows::Forms::FolderBrowserDialog());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->button4 = (gcnew System::Windows::Forms::Button());
			this->SuspendLayout();
			// 
			// textBox1
			// 
			this->textBox1->BackColor = System::Drawing::Color::Snow;
			this->textBox1->Cursor = System::Windows::Forms::Cursors::No;
			this->textBox1->Location = System::Drawing::Point(12, 25);
			this->textBox1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->textBox1->Name = L"textBox1";
			this->textBox1->ReadOnly = true;
			this->textBox1->Size = System::Drawing::Size(241, 22);
			this->textBox1->TabIndex = 0;
			// 
			// button1
			// 
			this->button1->BackColor = System::Drawing::SystemColors::ControlLight;
			this->button1->Location = System::Drawing::Point(265, 22);
			this->button1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(55, 28);
			this->button1->TabIndex = 1;
			this->button1->Text = L"Path";
			this->button1->UseVisualStyleBackColor = false;
			this->button1->Click += gcnew System::EventHandler(this, &CopyDlls::button1_Click);
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->FlatStyle = System::Windows::Forms::FlatStyle::Popup;
			this->label1->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->label1->Location = System::Drawing::Point(9, 5);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(63, 16);
			this->label1->TabIndex = 2;
			this->label1->Text = L"DLL Path :";
			// 
			// listBox1
			// 
			this->listBox1->BackColor = System::Drawing::Color::LightYellow;
			this->listBox1->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->listBox1->FormattingEnabled = true;
			this->listBox1->ItemHeight = 17;
			this->listBox1->Location = System::Drawing::Point(12, 57);
			this->listBox1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->listBox1->Name = L"listBox1";
			this->listBox1->Size = System::Drawing::Size(241, 174);
			this->listBox1->TabIndex = 3;
			// 
			// button2
			// 
			this->button2->BackColor = System::Drawing::Color::Lavender;
			this->button2->ForeColor = System::Drawing::SystemColors::ControlText;
			this->button2->Location = System::Drawing::Point(265, 58);
			this->button2->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button2->Name = L"button2";
			this->button2->Size = System::Drawing::Size(55, 28);
			this->button2->TabIndex = 4;
			this->button2->Text = L"Send";
			this->button2->UseVisualStyleBackColor = false;
			this->button2->Click += gcnew System::EventHandler(this, &CopyDlls::button2_Click);
			// 
			// folderBrowserDialog1
			// 
			this->folderBrowserDialog1->Description = L"Please select the folder of Dll files.";
			this->folderBrowserDialog1->ShowNewFolderButton = false;
			// 
			// button3
			// 
			this->button3->BackColor = System::Drawing::Color::White;
			this->button3->ForeColor = System::Drawing::Color::Crimson;
			this->button3->Location = System::Drawing::Point(265, 203);
			this->button3->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(55, 28);
			this->button3->TabIndex = 5;
			this->button3->Text = L"End";
			this->button3->UseVisualStyleBackColor = false;
			this->button3->Click += gcnew System::EventHandler(this, &CopyDlls::button3_Click);
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->ForeColor = System::Drawing::SystemColors::HotTrack;
			this->label3->Location = System::Drawing::Point(262, 135);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(62, 64);
			this->label3->TabIndex = 7;
			this->label3->Text = L"Click this \r\nbutton to\r\nterminate\r\nTestClient\r\n";
			// 
			// button4
			// 
			this->button4->BackColor = System::Drawing::SystemColors::ControlLight;
			this->button4->Location = System::Drawing::Point(265, 94);
			this->button4->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button4->Name = L"button4";
			this->button4->Size = System::Drawing::Size(55, 28);
			this->button4->TabIndex = 8;
			this->button4->Text = L"Back";
			this->button4->UseVisualStyleBackColor = false;
			this->button4->Click += gcnew System::EventHandler(this, &CopyDlls::button4_Click);
			// 
			// CopyDlls
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(7, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(332, 257);
			this->ControlBox = false;
			this->Controls->Add(this->button4);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->button3);
			this->Controls->Add(this->button2);
			this->Controls->Add(this->listBox1);
			this->Controls->Add(this->label1);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->textBox1);
			this->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->ForeColor = System::Drawing::SystemColors::ActiveCaptionText;
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedToolWindow;
			this->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->Name = L"CopyDlls";
			this->Opacity = 0.98;
			this->Text = L"Dlls Sender Utility Before Test";
			this->TopMost = true;
			this->TransparencyKey = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(192)), 
				static_cast<System::Int32>(static_cast<System::Byte>(255)));
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion

		// --< used by thread to send Dll files to the Test Server >--
		Void run(){
			SocketCommunicator::Message msg;
			try{
				const int BlockSize = 1024; // set block size
				for(int i=0; i<listBox1->Items->Count;i++){
					String^ name=Path::Combine(textBox1->Text, listBox1->Items[i]->ToString());
					String^ rep=name->Replace('\\','/'); // replace '\' to '/' in path
					std::string filename = marshal_as<std::string>(rep); //String^ to std::string 
					msg.body() = "dllfile";
					sndr->PostMsg(msg);
					msg.body()=marshal_as<std::string>(listBox1->Items[i]->ToString());
					sndr->PostMsg(msg);
					std::ifstream in(filename.c_str(),std::ios::binary);
					while(in.good()){ 
						std::string block;
						for(int i=0; i<BlockSize; ++i){
							if(!in.good())
								break;
							block += in.get();
						}
						// encode content of dll file
						std::vector<char> vmsg(block.begin(), block.end());
						std::string msgbody = Base64::encode(vmsg);
						// send msg to Test Server
						msg.body() = msgbody;
						sndr->PostMsg(msg);
					}
					msg.body() = "end";
					sndr->PostMsg(msg);
				}
				MessageBox::Show("DLL files sent out ...","Prompt");
				this->Hide(); // after sending out dll files hide this form
			}catch(...){
				MessageBox::Show("Send DLL files Fail!!! Please press 'Add Dlls' Button to try again. ","Warning");
			}
		}

		// --< button2(Send): checking send dll list and send dll files to Test Server >-----------
	private: System::Void button2_Click(System::Object^  sender, System::EventArgs^  e) 
			 { 
				 if (listBox1->Items->Count==0)
				 { // there is no dll files in the send list
					 String^ msg = "No Dll files found! Please select new path!";
					 MessageBox::Show(msg,"Warning");
				 }else{
					 sndr = new SocketCommunicator::Sender();
					 connect=false;
					 SocketCommunicator::Message msg;
					 // set Test Server port and ip
					 int port = 8088, tryCount = 0, MaxTries = 5;
					 std::string ip = "localhost";
					 // try to connect TestServer
					 while(++tryCount < MaxTries){
						 if(sndr->connect(SocketCommunicator::EndPoint(ip,port))){
							 System::Threading::Thread^ t = gcnew System::Threading::Thread(gcnew ThreadStart(this, &CopyDlls::run));
							 t->Start();
							 this->connect=true;
							 break;
						 }
						 Sleep(3);
					 }
					 if(!connect){
						 this->button3->Show();
						 this->label3->Show();
						 // if cannot connect to Test Server, than show Warning
						 String^ msg = "Cannot connect to the Server. Wait a moment to try again"
							 "\nOR\nPress 'Terminate' to quit the Test Harness and "
							 "check the Server.";
						 MessageBox::Show(msg,"Warning");
					 }
				 }
			 }

			 // --< button1(Path): select the path of Dll files >-----------
	private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) {
				 // show folderBrowserDialog to browse folder
				 folderBrowserDialog1 = gcnew FolderBrowserDialog();
				 folderBrowserDialog1->ShowNewFolderButton = false;
				 folderBrowserDialog1->SelectedPath = Directory::GetCurrentDirectory();
				 System::Windows::Forms::DialogResult result;
				 result = folderBrowserDialog1->ShowDialog();
				 if(result == System::Windows::Forms::DialogResult::OK)
				 { // if click OK button of folderBrowserDialog, set Path.
					 Directory::SetCurrentDirectory(folderBrowserDialog1->SelectedPath);
					 textBox1->Text = Directory::GetCurrentDirectory();
					 listBox1->Items->Clear();
				 }
				 listBox1->Items->Clear();
				 array<String^>^ files = Directory::GetFiles(Directory::GetCurrentDirectory(),"*.dll");
				 int len = files->Length;
				 for(int i=0; i<files->Length; ++i)
				 { // list dll files in listBox1
					 String^ name = Path::GetFileName(files[i]);
					 listBox1->Items->Add(name);
				 }
			 }

			 // --< button3(End): terminate only TestClient not TestServer >-----------
	private: System::Void button3_Click(System::Object^  sender, System::EventArgs^  e) {
				 if(MessageBox::Show("Do you want to terminate Test harness Client?","Quit Decision",
					 System::Windows::Forms::MessageBoxButtons::YesNo, MessageBoxIcon::Exclamation)
					 ==System::Windows::Forms::DialogResult::Yes)
				 { // Give out Warning, if click Yes button then exit Test Client
					 System::Environment::Exit(System::Environment::ExitCode);   
					 this->Close();
				 }
			 }

			 // --< button4(Back): Back to Form1 main GUI of Test Client >-----------
	private: System::Void button4_Click(System::Object^  sender, System::EventArgs^  e) {
				 if(MessageBox::Show("Back to Main Window?","Decision",
					 System::Windows::Forms::MessageBoxButtons::YesNo, MessageBoxIcon::Exclamation)
					 ==System::Windows::Forms::DialogResult::Yes)
				 { // if select Yes, then hide CopyDlls Form
					 this->Hide();
				 }
			 }

	};
}

#endif