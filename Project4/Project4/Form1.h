#ifndef FORM1_H
#define FORM1_H
#pragma once
///////////////////////////////////////////////////////////////////////////
// Form1.h - main GUI of the Test Client: browse files; display results  //
// ver 1.0  4/28/2012                                                    //
// Language:    Visual C++, Visual Studio 2010, SP1                      //
// Application: CSE 687 Project4                                         //
// Author:      Junwen Bu                                                //
///////////////////////////////////////////////////////////////////////////
/*
* Module Operations:
* =================================
* This module provide means to browse for and select configuration files
* for testing. It has utility to send configuration info to Test Server.
* It also provide views of Test Result.c_str Test results consist of a
* formal result that includes Test Name and ID, test author, date of 
* testing, and success status of each package test and an informal result
* that consists of whatever logged output the test designer implemented.
*
* Required Files:
* ===============
* CopyDlls.h, CopyDlls.cpp, Comm.h, BlockingQueue.h,
* threads.h, locks.h, Base64.h, Base64.cpp
* Communicator.lib
* 
* Interface:
* ==========================
* Almost everything are generated by Visual Studio 2010
*
* Two Thread-use Functions:
* ---------------------------------------------
* Void receiverRun(): used by Client Receiver Thread, get test result from Test Server
* Void run(): used by Client Sender Thread, send xml configuration info to Test Server
* System::Threading::Thread^ t=gcnew System::Threading::Thread(gcnew ThreadStart(this, &Form1::FunName));
* t->Start();
*
* Buttons:
* ---------------------------------------------
* button1(Browse): browse and set XML files directory
* button3(Send): check sending list and send Xml files' info to Test Server
* button4(Cancel): cancel sending list
* button5(Add Dlls): show Form CopyDlls which will send dll files to Test Server
*
*/

#include "CopyDlls.h"
#include "Comm.h"
#include "BlockingQueue.h"
#include "locks.h"
#include <iostream>
#include <sstream>
#include <string>
#include <conio.h>
#include <fstream>
#include "Base64.h"

namespace Client {
	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;
	using namespace System::Threading;
	using namespace System::IO;

	/// <summary>
	/// Summary for Form1
	/// </summary>
	public ref class Form1 : public System::Windows::Forms::Form
	{
	public:
		Form1(void)
		{
			InitializeComponent();
			//
			//TODO: Add the constructor code here
			//
			// show CopyDlls form
			Form^ rgForm = gcnew CopyDlls(false);       
			rgForm->ShowDialog();
			// create Client Receiver thread
			// set Test Client Receiver port 1354
			rcvr = new SocketCommunicator::Receiver(1354);
			System::Threading::Thread^ th = gcnew System::Threading::Thread(gcnew ThreadStart(this, &Form1::receiverRun));
			th->Start();
			// set isBackground property
			th->IsBackground=true; 
		}

	protected:
		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		~Form1()
		{
			if (components)
			{
				delete components;
			}
			delete sndr;          // delete sndr
			delete rcvr;          // delete rcvr
			Application::Exit();  // close program and exit application
		}

	private: SocketCommunicator::Sender *sndr;   // used to send info to Test Server
	private: SocketCommunicator::Receiver *rcvr; // used to receive msg from Test Server
	private: System::Windows::Forms::TextBox^  textBox1;
	private: System::Windows::Forms::Button^  button1;
	private: System::Windows::Forms::ListBox^  listBox1;
	private: System::Windows::Forms::Button^  button3;
	private: System::Windows::Forms::Label^  label2;
	private: System::Windows::Forms::Label^  label3;
	private: System::Windows::Forms::Label^  label4;
	private: System::Windows::Forms::FolderBrowserDialog^  folderBrowserDialog1;
	private: System::Windows::Forms::Button^  button4;
	private: System::Windows::Forms::ListBox^  listBox2;
	private: System::Windows::Forms::Button^  button5;
	private: System::Windows::Forms::TextBox^  textBox2;
	private: System::Windows::Forms::TextBox^  textBox3;
	private: System::Windows::Forms::Label^  label1;
	private: System::Windows::Forms::Label^  label5;

	protected: 

	private:
		/// <summary>
		/// Required designer variable.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		void InitializeComponent(void)
		{
			this->textBox1 = (gcnew System::Windows::Forms::TextBox());
			this->button1 = (gcnew System::Windows::Forms::Button());
			this->listBox1 = (gcnew System::Windows::Forms::ListBox());
			this->button3 = (gcnew System::Windows::Forms::Button());
			this->label2 = (gcnew System::Windows::Forms::Label());
			this->label3 = (gcnew System::Windows::Forms::Label());
			this->label4 = (gcnew System::Windows::Forms::Label());
			this->textBox2 = (gcnew System::Windows::Forms::TextBox());
			this->textBox3 = (gcnew System::Windows::Forms::TextBox());
			this->folderBrowserDialog1 = (gcnew System::Windows::Forms::FolderBrowserDialog());
			this->button4 = (gcnew System::Windows::Forms::Button());
			this->listBox2 = (gcnew System::Windows::Forms::ListBox());
			this->button5 = (gcnew System::Windows::Forms::Button());
			this->label1 = (gcnew System::Windows::Forms::Label());
			this->label5 = (gcnew System::Windows::Forms::Label());
			this->SuspendLayout();
			// 
			// textBox1
			// 
			this->textBox1->BackColor = System::Drawing::Color::Lavender;
			this->textBox1->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->textBox1->Cursor = System::Windows::Forms::Cursors::No;
			this->textBox1->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 8.25F, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->textBox1->Location = System::Drawing::Point(177, 10);
			this->textBox1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->textBox1->Name = L"textBox1";
			this->textBox1->ReadOnly = true;
			this->textBox1->RightToLeft = System::Windows::Forms::RightToLeft::No;
			this->textBox1->Size = System::Drawing::Size(182, 22);
			this->textBox1->TabIndex = 0;
			this->textBox1->TextAlign = System::Windows::Forms::HorizontalAlignment::Right;
			// 
			// button1
			// 
			this->button1->BackColor = System::Drawing::SystemColors::ControlLight;
			this->button1->Location = System::Drawing::Point(365, 8);
			this->button1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(69, 25);
			this->button1->TabIndex = 1;
			this->button1->Text = L"Browse";
			this->button1->UseVisualStyleBackColor = false;
			this->button1->Click += gcnew System::EventHandler(this, &Form1::button1_Click);
			// 
			// listBox1
			// 
			this->listBox1->BackColor = System::Drawing::Color::GhostWhite;
			this->listBox1->Cursor = System::Windows::Forms::Cursors::Hand;
			this->listBox1->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->listBox1->FormattingEnabled = true;
			this->listBox1->ItemHeight = 17;
			this->listBox1->Location = System::Drawing::Point(14, 62);
			this->listBox1->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->listBox1->Name = L"listBox1";
			this->listBox1->Size = System::Drawing::Size(176, 106);
			this->listBox1->TabIndex = 2;
			this->listBox1->DoubleClick += gcnew System::EventHandler(this, &Form1::listBox1_DoubleClick);
			// 
			// button3
			// 
			this->button3->BackColor = System::Drawing::Color::Lavender;
			this->button3->Location = System::Drawing::Point(364, 107);
			this->button3->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button3->Name = L"button3";
			this->button3->Size = System::Drawing::Size(69, 25);
			this->button3->TabIndex = 4;
			this->button3->Text = L"Send XML";
			this->button3->UseVisualStyleBackColor = false;
			this->button3->Click += gcnew System::EventHandler(this, &Form1::button3_Click);
			// 
			// label2
			// 
			this->label2->AutoSize = true;
			this->label2->Location = System::Drawing::Point(12, 42);
			this->label2->Name = L"label2";
			this->label2->Size = System::Drawing::Size(127, 16);
			this->label2->TabIndex = 7;
			this->label2->Text = L"Double Click to Select";
			// 
			// label3
			// 
			this->label3->AutoSize = true;
			this->label3->Location = System::Drawing::Point(193, 42);
			this->label3->Name = L"label3";
			this->label3->Size = System::Drawing::Size(74, 16);
			this->label3->TabIndex = 8;
			this->label3->Text = L"Sending List";
			// 
			// label4
			// 
			this->label4->AutoSize = true;
			this->label4->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->label4->Location = System::Drawing::Point(10, 12);
			this->label4->Name = L"label4";
			this->label4->Size = System::Drawing::Size(161, 17);
			this->label4->TabIndex = 11;
			this->label4->Text = L"Configuration Files Path:";
			// 
			// textBox2
			// 
			this->textBox2->BackColor = System::Drawing::Color::Ivory;
			this->textBox2->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->textBox2->Cursor = System::Windows::Forms::Cursors::No;
			this->textBox2->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->textBox2->Location = System::Drawing::Point(12, 190);
			this->textBox2->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->textBox2->Multiline = true;
			this->textBox2->Name = L"textBox2";
			this->textBox2->ReadOnly = true;
			this->textBox2->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->textBox2->Size = System::Drawing::Size(421, 135);
			this->textBox2->TabIndex = 1;
			// 
			// textBox3
			// 
			this->textBox3->BackColor = System::Drawing::Color::LightYellow;
			this->textBox3->BorderStyle = System::Windows::Forms::BorderStyle::FixedSingle;
			this->textBox3->Cursor = System::Windows::Forms::Cursors::No;
			this->textBox3->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Regular, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->textBox3->Location = System::Drawing::Point(12, 349);
			this->textBox3->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->textBox3->Multiline = true;
			this->textBox3->Name = L"textBox3";
			this->textBox3->ReadOnly = true;
			this->textBox3->ScrollBars = System::Windows::Forms::ScrollBars::Vertical;
			this->textBox3->Size = System::Drawing::Size(421, 145);
			this->textBox3->TabIndex = 1;
			// 
			// button4
			// 
			this->button4->BackColor = System::Drawing::SystemColors::ControlLight;
			this->button4->Location = System::Drawing::Point(364, 140);
			this->button4->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button4->Name = L"button4";
			this->button4->Size = System::Drawing::Size(69, 26);
			this->button4->TabIndex = 14;
			this->button4->Text = L"Cancel";
			this->button4->UseVisualStyleBackColor = false;
			this->button4->Click += gcnew System::EventHandler(this, &Form1::button4_Click);
			// 
			// listBox2
			// 
			this->listBox2->BackColor = System::Drawing::Color::GhostWhite;
			this->listBox2->Cursor = System::Windows::Forms::Cursors::Hand;
			this->listBox2->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 9, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(134)));
			this->listBox2->FormattingEnabled = true;
			this->listBox2->ItemHeight = 17;
			this->listBox2->Location = System::Drawing::Point(196, 62);
			this->listBox2->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->listBox2->Name = L"listBox2";
			this->listBox2->Size = System::Drawing::Size(163, 106);
			this->listBox2->TabIndex = 15;
			this->listBox2->DoubleClick += gcnew System::EventHandler(this, &Form1::listBox2_DoubleClick);
			// 
			// button5
			// 
			this->button5->BackColor = System::Drawing::SystemColors::ControlLight;
			this->button5->Location = System::Drawing::Point(364, 62);
			this->button5->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->button5->Name = L"button5";
			this->button5->Size = System::Drawing::Size(69, 24);
			this->button5->TabIndex = 16;
			this->button5->Text = L"Add Dlls";
			this->button5->UseVisualStyleBackColor = false;
			this->button5->Click += gcnew System::EventHandler(this, &Form1::button5_Click);
			// 
			// label1
			// 
			this->label1->AutoSize = true;
			this->label1->Location = System::Drawing::Point(12, 170);
			this->label1->Name = L"label1";
			this->label1->Size = System::Drawing::Size(124, 16);
			this->label1->TabIndex = 17;
			this->label1->Text = L"Fromal Result Logger";
			// 
			// label5
			// 
			this->label5->AutoSize = true;
			this->label5->Location = System::Drawing::Point(12, 329);
			this->label5->Name = L"label5";
			this->label5->Size = System::Drawing::Size(133, 16);
			this->label5->TabIndex = 18;
			this->label5->Text = L"Informal Result Logger";
			// 
			// Form1
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(7, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->BackColor = System::Drawing::SystemColors::Control;
			this->ClientSize = System::Drawing::Size(442, 513);
			this->Controls->Add(this->label5);
			this->Controls->Add(this->label1);
			this->Controls->Add(this->textBox2);
			this->Controls->Add(this->textBox3);
			this->Controls->Add(this->button5);
			this->Controls->Add(this->listBox2);
			this->Controls->Add(this->button4);
			this->Controls->Add(this->label4);
			this->Controls->Add(this->label3);
			this->Controls->Add(this->label2);
			this->Controls->Add(this->button3);
			this->Controls->Add(this->listBox1);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->textBox1);
			this->Font = (gcnew System::Drawing::Font(L"Microsoft YaHei", 8.25F, System::Drawing::FontStyle::Bold, System::Drawing::GraphicsUnit::Point, 
				static_cast<System::Byte>(0)));
			this->FormBorderStyle = System::Windows::Forms::FormBorderStyle::FixedToolWindow;
			this->Margin = System::Windows::Forms::Padding(3, 4, 3, 4);
			this->Name = L"Form1";
			this->Opacity = 0.98;
			this->Text = L"Test Client";
			this->ResumeLayout(false);
			this->PerformLayout();

		}
#pragma endregion

		// --< used by Client Receiver Thread, get test result from Test Server >----
		Void receiverRun(){
			SocketCommunicator::Message msg;
			std::string temptext="",informaltext="";
			// Client Receiver always run ...
			while(true){ // get Formal Test Result OR Informal Test Result
				msg=rcvr->GetMsg(); // if result belongs to formal result
				if(msg.body().find("< FORMAL RESULT >")!=msg.body().npos){
					std::string textresult=msg.body().c_str();
					String^ textboxStr="";
					char* charStr=(char*)textresult.c_str();
					for (int i=0; i<(int)strlen(charStr);++i)
						textboxStr+=(wchar_t)charStr[i];
					this->textBox2->AppendText(textboxStr);
				}else // result belongs to informal result
					if(msg.body().find("<Informal Test Result>")!=msg.body().npos){
						std::string informaltext=msg.body().c_str();
						String^ textboxStr="";
						textboxStr+="\r\n";
						char* charStr=(char*)informaltext.c_str();
						for (int i=0; i<(int)strlen(charStr);++i)
							textboxStr+=(wchar_t)charStr[i];
						this->textBox3->AppendText(textboxStr);
					} // end if
			}// end outer while
		}

		// --< used by Client Sender Thread, send xml configuration info to Test Server >----
		Void run()
		{
			SocketCommunicator::Message msg;
			try{ 
				const int BlockSize = 1024; // set block size
				for(int i=0; i<listBox2->Items->Count;i++){
					String^ name=Path::Combine(textBox1->Text, listBox2->Items[i]->ToString());
					String^ rep=name->Replace('\\','/'); // replace '\' with '/' in path
					std::string filename = marshal_as<std::string>(rep); //String^ to std::string
					msg.body() = "xmlfile";
					sndr->PostMsg(msg);
					// Convert System::String^ to std::string
					msg.body()=marshal_as<std::string>(listBox2->Items[i]->ToString());
					sndr->PostMsg(msg);
					std::ifstream in(filename.c_str(),std::ios::binary);
					while(in.good()){
						std::string block;
						for(int i=0; i<BlockSize; ++i){
							if(!in.good())
								break;
							block += in.get();
						}
						// do encode
						std::vector<char> vmsg(block.begin(), block.end());
						std::string msgbody = Base64::encode(vmsg);
						// send msg to Test Server
						msg.body() = msgbody;
						sndr->PostMsg(msg);
					}
					msg.body() = "end";
					sndr->PostMsg(msg);
				}
			}catch(...){
				MessageBox::Show("Send Fail!!! Please try again. ","Warning");}
		}

		// --< button1(Browse): browse and set XML files directory >-----------
	private: System::Void button1_Click(System::Object^  sender, System::EventArgs^  e) 
			 {  // show folderBrowserDialog
				 folderBrowserDialog1 = gcnew FolderBrowserDialog();
				 folderBrowserDialog1->ShowNewFolderButton = false;
				 folderBrowserDialog1->SelectedPath = Directory::GetCurrentDirectory();
				 System::Windows::Forms::DialogResult result;
				 result = folderBrowserDialog1->ShowDialog();
				 if(result == System::Windows::Forms::DialogResult::OK)
				 { // if click OK button in folderBrowserDialog
					 Directory::SetCurrentDirectory(folderBrowserDialog1->SelectedPath);
					 textBox1->Text = Directory::GetCurrentDirectory();
					 listBox1->Items->Clear();
					 listBox2->Items->Clear();
				 }else
					 if(result == System::Windows::Forms::DialogResult::Cancel)
					 { // if click Cancel button in folderBrowserDialog
						 return;
					 }
					 listBox1->Items->Clear();
					 listBox2->Items->Clear();
					 array<String^>^ files = Directory::GetFiles(Directory::GetCurrentDirectory(),"*.xml");
					 if(files->Length==0){ // if there is no Xml file under this path
						 MessageBox::Show("No xml files found! Please change path","Prompt");
					 }else
						 for(int i=0; i<files->Length; ++i)
						 { // add xml files to listBox1
							 String^ name = Path::GetFileName(files[i]);
							 listBox1->Items->Add(name);
						 }
			 }

			 // --< button4(Cancel): cancel sending list >-----------
	private: System::Void button4_Click(System::Object^  sender, System::EventArgs^  e) 
			 {
				 if(listBox2->Items->Count!=0)
				 {
					 listBox1->Items->Clear();
					 listBox2->Items->Clear();
					 // array files used to store xml files info 
					 array<String^>^ files = Directory::GetFiles(Directory::GetCurrentDirectory(),"*.xml");
					 int len = files->Length;
					 for(int i=0; i<files->Length; ++i)
					 { // get Xml files again and list them in listBox1
						 String^ name = Path::GetFileName(files[i]);
						 listBox1->Items->Add(name);
					 }
				 }
			 }

			 // --< double click items in listBox1 will add these items to Sending list >-----------
	private: System::Void listBox1_DoubleClick(System::Object^ sender,System::EventArgs^ e) 
			 {
				 for(int i=0; i<listBox1->Items->Count; ++i)
				 {
					 if(listBox1->GetSelected(i))
					 { // remove items from listBox1 and add items to Sending list(listBox2)
						 listBox2->Items->Add(listBox1->SelectedItem);
						 listBox1->Items->Remove(listBox1->SelectedItem);
						 break;
					 }
				 }
			 }

			 // --< button5(Add Dlls): show Form CopyDlls which will send dll files to Test Server >---
	private: System::Void button5_Click(System::Object^  sender, System::EventArgs^  e) {
				 Form^ rgForm = gcnew CopyDlls(true);
				 rgForm->ShowDialog();
			 }

			 // --< button3(Send): check sending list and send Xml files' info to Test Server >---
	private: System::Void button3_Click(System::Object^  sender, System::EventArgs^  e) {
				 boolean connect=false;
				 if (listBox2->Items->Count==0)
					 // if sending list is empty, show MessageBox ...
					 MessageBox::Show("Empty sending list. Please select ...!","Warning");
				 else{ // trying connect Test Server
					 sndr = new SocketCommunicator::Sender();
					 SocketCommunicator::Message msg;
					 // set Test Server port:8088, ip:"localhost"
					 int port = 8088, tryCount = 0, MaxTries = 5;
					 std::string ip = "localhost";
					 while(++tryCount < MaxTries){
						 if(sndr->connect(SocketCommunicator::EndPoint(ip,port))){
							 // using thread to send xml info
							 System::Threading::Thread^ t = gcnew System::Threading::Thread(gcnew ThreadStart(this, &Form1::run));
							 t->Start();
							 connect=true;
							 break;}
						 Sleep(3);
					 }
					 if(!connect)
						 MessageBox::Show("Cannot connect to the Server. Wait a moment to try again.","Warning");
				 }
			 }

			 // --< double click items in listBox2 and items will return to listBox1 >-----------
	private: System::Void listBox2_DoubleClick(System::Object^  sender, System::EventArgs^  e) 
			 {
				 for(int i=0; i<listBox2->Items->Count; ++i)
				 {
					 if(listBox2->GetSelected(i))
					 { // remove item from listBox2 add item to listBox1
						 listBox1->Items->Add(listBox2->SelectedItem);
						 listBox2->Items->Remove(listBox2->SelectedItem);
						 break;
					 }
				 }
			 }
	};
}
#endif
